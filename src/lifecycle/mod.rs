pub fn lifecycle() {
    println!("-------------lifecycle------------------");

    // 如今的Rust编译器会自动推导每个变量的生命周期
    // 但有时候需要我们手动注明生命周期
    // 比较常见的场景是与&str交互的时候
    // 生命周期注解有着一个不太常见的语法：生命周期参数名称必须以撇号，
    // 开头，其名称通常全小写，类似于泛型，其名称非常短。
    // 'a是大多数人默认使用的名称
    // 生命周期参数注解位于引用的&之后，并有一个空格来将引用类型与生命周期注解分隔开

    // 如果在处理字符串时不添加注解很可能不会通过编译器

    // 例1：
    fn bigger<'a>(str1: &'a str, str2: &'a str) -> &'a str {
        if str1 > str2 {
            str1
        } else {
            str2
        }
    }

    println!("{}", bigger("a", "b"));
    // 生命周期注解 仅仅是个注解，不会改变变量本身的生命周期
    // 是给编译器看的
    //

    // 例2：
    // 定义结构体时很有用

    #[derive(Debug)]
    struct PersonM<'a> {
        name: &'a str, // 这是一个引用，引用了一个字符串，字符串本身有自己的生命周期
                    // 但是如果实例化了这个PersonM后实例化对象也有自己的生命周期
    }

    let p1 = PersonM { name: "小明" }; // name与p各自有各自的生命周期
    // 这里有两个生命周期，Rust里面不能这么写，必须让它们的生命周期统一起来，

    println!("{:?}", p1);
}
